plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

android {
    compileSdkVersion rootProject.compileSdkVersion

    defaultConfig {
        applicationId "com.app.freshworkstudio"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.compileSdkVersion
        versionCode 2
        versionName "1.2"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField("String", "API_KEY", api_key)


    }

    signingConfigs {
        release {
            storeFile file("release.jks")
            storePassword 'release'
            keyAlias 'release'
            keyPassword 'release'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions 'version'
    productFlavors {

        singleSearch {
            dimension = 'version'
            buildConfigField("boolean", "isFragmentSearch", 'true')
        }

        vActivitySearch {
            dimension = 'version'
            buildConfigField("boolean", "isFragmentSearch", 'false')
        }
    }
    configurations {
        androidTestImplementation {
            exclude group: 'io.mockk', module: 'mockk-agent-jvm'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
        useIR = true

    }
    buildFeatures {
        dataBinding true
    }
    lintOptions {
        abortOnError false
    }

}
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}
dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "androidx.core:core-ktx:$coreKtx"
    implementation "androidx.appcompat:appcompat:$appcompat"
    implementation "com.google.android.material:material:$materialVersion"
    implementation "androidx.constraintlayout:constraintlayout:$constraintlayout"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

    // architecture components
    implementation "androidx.fragment:fragment-ktx:$fragmentVersion"

    // lifecycle
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"

    // room database
    implementation "androidx.room:room-runtime:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
    testImplementation "androidx.arch.core:core-testing:$archCompomentVersion"

    // data binding library
    implementation "com.github.skydoves:baserecyclerviewadapter:$baseAdapterVersion"
    implementation "com.github.skydoves:whatif:$whatIfVersion"
    implementation "com.github.skydoves:bindables:$bindablesVersion"
    implementation "com.github.skydoves:bundler:$bundlerVersion"


    // hilt
    implementation "com.google.dagger:hilt-android:$hiltCoreVersion"
    kapt "com.google.dagger:hilt-compiler:$hiltCoreVersion"
    kapt "androidx.hilt:hilt-compiler:$hiltVersion"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hiltCoreVersion"
    kaptAndroidTest "com.google.dagger:hilt-compiler:$hiltCoreVersion"
    kaptTest "com.google.dagger:hilt-android-compiler:$hiltCoreVersion"

    // coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"

    // network
    implementation "com.github.skydoves:sandwich:$sandwichVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.google.code.gson:gson:$gsonVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttpVersion"

    // glide
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    kapt "com.github.bumptech.glide:compiler:$glideVersion"


    // unit test
    testImplementation "junit:junit:$junitVersion"
    testImplementation "androidx.test:core:$unitTestCoreVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockitoKotlinVersion"
    testImplementation "com.google.truth:truth:$googleTruth"

    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espressoVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxTest"
    androidTestImplementation "androidx.test:rules:$androidxTestRules"
    androidTestImplementation "androidx.test:runner:$androidxTest"
    androidTestImplementation "androidx.test:core:$androidxTest"
    androidTestImplementation "androidx.test.ext:junit-ktx:$androidxTest"
    androidTestImplementation "io.mockk:mockk-android:$mockk_version"
    androidTestImplementation "io.mockk:mockk-agent-jvm:$mockk_version"

}